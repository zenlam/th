odoo.define('th_point_of_sale.popups', function(require) {
    "use strict";

    var PopupWidget = require('point_of_sale.popups');
    var gui = require('point_of_sale.gui');
    var screens = require('point_of_sale.screens');
    var models = require('point_of_sale.models');
    var Chrome = require('point_of_sale.chrome');
    var core = require('web.core');

    var _t  = core._t;

    var numberPopUp = _.find(gui.Gui.prototype.popup_classes, function(popup_class) { return popup_class.name == 'number' });

    /**
     *  ** JS HACK **
     *  =============
     *  Danger to spoil Global NameSpace with this variable,
     *  But need to do it, otherwise need to implement whole
     *  structure again, which takes time...!
     *
     *  @todo Siddharth Bhalgami
     *  Also, need to check whether,
     *  It is possible to use same state for modifier or need new one,
     *  If new then how it will be done...??? (Thinking...) ???
     */
    var NUMPADSTATE;

    screens.NumpadWidget.include({
        init: function(parent) {
            this._super(parent);
            NUMPADSTATE = this.state;
        },
    });


    /**
     *  Works exactly similar as `NumpadWidget`
     *  Also taking NumpadState which is already generated by `NumpadWidget`,
     *  And perform the necessary actions,
     *  So, Can use back Odoo's functionality.
     */
    var NumPadPopupWidget = PopupWidget.extend({
        template: 'NumPadPopupWidget',
        init: function(parent, args) {
            this._super(parent, args);
            this.state = NUMPADSTATE;
        },
        events: {
            'click .button.cancel':  'click_cancel',
        },
        renderElement: function() {
            this._super();
            this.applyAccessRights();
            this.state.bind('change:mode', this.changedMode, this);
            this.pos.bind('change:cashier', this.applyAccessRights, this);
            this.changedMode();
            this.$el.find('.numpad-backspace').click(_.bind(this.clickDeleteLastChar, this));
            this.$el.find('.numpad-minus').click(_.bind(this.clickSwitchSign, this));
            this.$el.find('.number-char').click(_.bind(this.clickAppendNewChar, this));
            this.$el.find('.mode-button').click(_.bind(this.clickChangeMode, this));
        },
        applyAccessRights: function() {
            var cashier = this.pos.get('cashier') || this.pos.get_cashier();
            var has_price_control_rights = !this.pos.config.restrict_price_control || cashier.role == 'manager';
            this.$el.find('.mode-button[data-mode="price"]')
                .toggleClass('disabled-mode', !has_price_control_rights)
                .prop('disabled', !has_price_control_rights);
            if (!has_price_control_rights && this.state.get('mode')=='price'){
                this.state.changeMode('quantity');
            }
        },
        clickDeleteLastChar: function() {
            return this.state.deleteLastChar();
        },
        clickSwitchSign: function() {
            return this.state.switchSign();
        },
        clickAppendNewChar: function(event) {
            var newChar;
            newChar = event.currentTarget.innerText || event.currentTarget.textContent;
            return this.state.appendNewChar(newChar);
        },
        clickChangeMode: function(event) {
            var newMode = event.currentTarget.attributes['data-mode'].nodeValue;
            return this.state.changeMode(newMode);
        },
        changedMode: function() {
            var mode = this.state.get('mode');
            $('.selected-mode').removeClass('selected-mode');
            $(_.str.sprintf('.mode-button[data-mode="%s"]', mode), this.$el).addClass('selected-mode');
        },
    });

    gui.define_popup({name:'numpad_popup', widget: NumPadPopupWidget});

    var FunctionsPopupWidget = PopupWidget.extend({
        template: 'FunctionsPopupWidget',
        init: function(parent, args) {
            this._super(parent, args);
        },
        events: {
            'click .button.cancel':  'click_cancel',
        },
        renderElement: function() {
            this._super();
        },
    });

    gui.define_popup({name:'function_popup', widget: FunctionsPopupWidget});

    return {
        FunctionsPopupWidget: FunctionsPopupWidget,
        NumPadPopupWidget: NumPadPopupWidget,
    };

});
